{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funkcja Rungego"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "f (generic function with 1 method)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function f(x)\n",
    "    return Float64(Float64(1)/(Float64(25)*(x^Float64(2)) + Float64(1)))\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funkcja max ( |f(xk) - w(xk)| ) na przedziale [-1,1] w N równoodległych punktach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 1000\n",
    "x_k = zeros(Float64, N+1)\n",
    "for i = 0:N\n",
    "    x_k[i+1] = -1 + (2*i)/N\n",
    "end\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "max (generic function with 1 method)"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function max(f,w)\n",
    "    e_k = zeros(Float64, N+1)\n",
    "    for i = 1:(N+1)\n",
    "        e_k[i] = abs(f(x_k[i]) - w(x_k[i]))\n",
    "    end\n",
    "    return maximum(e_k)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wielomian interpolacyjny Newtona"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "newton_coeffs (generic function with 1 method)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function newton_coeffs(nodes, f_vals)\n",
    "    coeffs = Float64[]\n",
    "    len = length(nodes)\n",
    "    f_values = copy(f_vals)\n",
    "\n",
    "    push!(coeffs, f_values[1])\n",
    "    \n",
    "    for j = 1:len-1\n",
    "        for i = 1:len-j\n",
    "            f_values[i] = ((f_values[i] - f_values[i + 1])\n",
    "                             / (nodes[i] - nodes[i + j]))\n",
    "        end\n",
    "        push!(coeffs, f_values[1])\n",
    "    end\n",
    "    coeffs\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Newton (generic function with 1 method)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function Newton(x, xnodes, f_values)\n",
    "    listofa = newton_coeffs(xnodes, f_values)\n",
    "    sum = 0\n",
    "    for i = 1:length(listofa)\n",
    "        product = 1\n",
    "        for j = 1:i-1\n",
    "            product *= (x - xnodes[j])\n",
    "        end\n",
    "        sum += product * listofa[i]\n",
    "    end\n",
    "    return sum\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Przykład użycia Newtona (podajemy wiejsce, w którym chcemy wartość, punkty w których interpolujemy (jako listę) oraz wartości funkcji w tych punktach)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Newton(0, [-2,-1, 0, 1, 2, 3], [31, 5, 1, 1, 11, 61])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) Wielomian interpolujący funkcję f w węzłach równoodległych"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wielomian ma być stopnia 9, więc potrzebujemy 10 równoodległych punktów na przedziale [-1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_k2 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    x_k2[i] = -1 + (i-1)*Float64((2/9))\n",
    "end\n",
    "fx_k2 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    fx_k2[i] = f(x_k2[i])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "wa (generic function with 1 method)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function wa(x)\n",
    "    Newton(x,x_k2,fx_k2)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10 zer T10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_k3 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    x_k3[i] = Float64(cos((2*i-1) * pi / 20 ))\n",
    "end\n",
    "fx_k3 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    fx_k3[i] = f(x_k3[i])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "wb (generic function with 1 method)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function wb(x)\n",
    "    Newton(x,x_k3,fx_k3)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10 ekstremów T9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_k4 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    x_k4[i] = Float64(cos( (i-1)*pi / 9 ))\n",
    "end\n",
    "fx_k4 = zeros(Float64,10)\n",
    "for i = 1:10\n",
    "    fx_k4[i] = f(x_k4[i])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "wc (generic function with 1 method)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function wc(x)\n",
    "    Newton(x,x_k4,fx_k4)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Algorytm Clenshawa dla wielomianów czebyszewa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "clenshaw (generic function with 1 method)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function clenshaw(n,c,x)\n",
    "    Bk_1 = 0\n",
    "    Bk_2 = 0\n",
    "    for i = n:(-1):1\n",
    "        Bk = Float64(2) * x * Bk_1 - Bk_2 + c[i+1]\n",
    "        Bk_2 = Bk_1\n",
    "        Bk_1 = Bk\n",
    "    end\n",
    "    return x * Bk_1 - Bk_2 + c[1]/Float64(2)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "using QuadGK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "p (generic function with 1 method)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function p(x)\n",
    "    return Float64((Float64(1) - Float64(x^2)) ^ (0.5))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "T (generic function with 1 method)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function T(k,x)\n",
    "    return cos(k * acos(x))\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Definicja 10-ciu pierwszych wielomianów Legandre`a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "function p0(x)\n",
    "    return 1\n",
    "end\n",
    "function p1(x)\n",
    "    return x\n",
    "end\n",
    "P_h = [p0,p1]\n",
    "for i = 2:10\n",
    "    push!(P_h, (x-> ((2*i-1)/i)*x*(P_h[i](x)) - ((i-1)/i) * (P_h[i-1](x)) ))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "P (generic function with 1 method)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function P(n,x)\n",
    "    P_h[n+1](x)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "suma d0 \\* P0(x) + d1 \\* P1(x) + ... + dn \\* Pn(x) - można Clenshowem w wersji dla Legandre`a, ale coś nie wyszło"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sum_of_legandre (generic function with 1 method)"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function sum_of_legandre(n,d,x)\n",
    "    s = Float64(0)\n",
    "    for i = 0:n\n",
    "        s += d[i+1] * P(i,x)\n",
    "    end\n",
    "    return s\n",
    "end       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "obliczanie d_k = <f,Pk> (bardzo długo się liczą)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "d_k = zeros(Float64,10)\n",
    "for i = 0:9\n",
    "    d_k[i+1] = quadgk(x -> f(x) * P(i,x), -1, 1)[1]\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "obliczanie d_k2 = <f,Pk> / <Pk,Pk>, <Pk,Pk> = 2/(2k+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "d_k2 = zeros(Float64,10)\n",
    "for i = 0:9\n",
    "    d_k2[i+1] = d_k[i+1] * ((2*i + 1) / 2)\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wielomian optymalny w d) to suma d0 \\* P0(x) + d1 \\* P1(x) + ... + dn \\* Pn(x) dla d_k = <f,Pk> / <Pk,Pk>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "wd (generic function with 1 method)"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function wd(x)\n",
    "    return Float64(sum_of_legandre(9,d_k2,x) )\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Podpunkt e to wielomian w(x) = pi/2 * (clenshaw n=9, ck = <f,Tk(x)>, x=x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "c_k = zeros(Float64,10)\n",
    "for i = 0:9\n",
    "    c_k[i+1] = quadgk(x -> p(x) * f(x) * T(i,x), -1, 1)[1]\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "we (generic function with 1 method)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function we(x)\n",
    "    return Float64( (2 / pi) * clenshaw(9,c_k,x))\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3002811297925676"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(f,wa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2691783353450813"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(f,wb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3190952547347733"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(f,wc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.14958350156008882"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(f,wd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.170571513367629"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(f,we)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.0.1",
   "language": "julia",
   "name": "julia-1.0"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.0.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
